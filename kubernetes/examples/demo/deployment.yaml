# Let's say you use ReplicaSet-A for controlling your pods, then You wish to update your pods to a newer version,
# now you should create Replicaset-B, scale down ReplicaSet-A and scale up ReplicaSet-B by one step repeatedly (This process is known as rolling update).
# Although this does the job, but it's not a good practice, it's better to let K8S do the job.
#
# A Deployment resource does this automatically without any human interaction and increases the abstraction by one level.
#
# Note: Deployment doesn't interact with pods directly, it is rolling update using ReplicaSets.
apiVersion: apps/v1
kind: Deployment
metadata:
  name: books
  # namespace
  annotations:
    createdBy: foo
spec:
  # versions to rollback (by default - 10)
  revisionHistoryLimit: 3
  replicas: 3
  selector:
    matchLabels:
      app: books # has to match .spec.template.metadata.labels
  template:
    metadata:
      labels:
        app: books # has to match .spec.selector.matchLabels
    spec:
    # all type of volues: https://kubernetes.io/docs/concepts/storage/volumes/
#      volumes:
#        - name: configmap-file
#          configMap:
#            name: configmap-file
#        - name: empty
#          emptyDir: {}
      containers:
        - image: vielen1991/books:1
#          volumeMounts:
#            - mountPath: /tmp
#              name: configmap-file
#            - mountPath: /empty
#              name: empty
          name: books
          env:
            - name: APPLICATION_PORT
              valueFrom:
                configMapKeyRef:
                  key: APPLICATION_PORT
                  name: configmap
            - name: APPLICATION_NAME
              valueFrom:
                configMapKeyRef:
                  key: APPLICATION_NAME
                  name: configmap
#          envFrom:
#            - secretRef:
#                name: secret
#          envFrom:
#            - configMapRef:
#                name: configmap
          livenessProbe: # if fails - container will be restarted
            httpGet:
              port: http
              path: /health
          startupProbe: # check if container is available after startup (for long-start containers, java big apps for example)
            httpGet:
              port: http
              path: /health
          readinessProbe: # if fails - traffic will be stopped to this container, but container won't be restarted
            httpGet:
              port: http
              path: /health
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: https
              containerPort: 8443
              protocol: TCP
          resources:
            limits:
              cpu: 100m
              memory: 256Mi
            requests:
              cpu: 100m
              memory: 128Mi
#      -- turn off schedule logic on nodes with key dedicated equal permanent
#      tolerations:
#        - key: dedicated
#          operator: Equal
#          value: permanent
#          effect: NoSchedule
#      -- schedule pods on nodes with disktype: ssd label
#      nodeSelector:
#        disktype: ssd
#      affinity:
#      -- required to schedule all pods on concrete node pool
#        nodeAffinity:
#          requiredDuringSchedulingIgnoredDuringExecution:
#            nodeSelectorTerms:
#              - matchExpressions:
#                  - key: domain.local/nodepool-type
#                    operator: In
#                    values:
#                      - static
#      -- avoids put multiple replicas with label app.kubernetes.io/name=books on a single node with topologyKey
#        podAntiAffinity:
#          preferredDuringSchedulingIgnoredDuringExecution:
#            - weight: 80
#              podAffinityTerm:
#                labelSelector:
#                  matchExpressions:
#                    - key: app.kubernetes.io/name
#                      operator: In
#                      values:
#                        - books
#                topologyKey: kubernetes.io/hostname