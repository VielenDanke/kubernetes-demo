# Let's say you use ReplicaSet-A for controlling your pods, then You wish to update your pods to a newer version,
# now you should create Replicaset-B, scale down ReplicaSet-A and scale up ReplicaSet-B by one step repeatedly (This process is known as rolling update).
# Although this does the job, but it's not a good practice, it's better to let K8S do the job.
#
# A Deployment resource does this automatically without any human interaction and increases the abstraction by one level.
#
# Note: Deployment doesn't interact with pods directly, it is rolling update using ReplicaSets.
apiVersion: apps/v1
kind: Deployment
metadata:
  name: books
spec:
  replicas: 3
  revisionHistoryLimit: 3 # how many old ReplicaSet for this Deployment you want to retain. Default - 10
  selector:
    matchLabels:
      app: books # has to match .spec.template.metadata.labels
  template:
    metadata:
      labels:
        app: books # has to match .spec.selector.matchLabels
    spec:
#      volumes:
#        - name: books-secret
#          secret:
#            secretName: books-secret
#            items:
#              - key: postgresConnectionUrl
#                path: postgres
#      initContainers:
#        - name: prepare
#          image: busybox:1.35.0
#          imagePullPolicy: IfNotPresent
#          command:
#            - sh
#            - -c
#            - |
#              echo "I do any job before the main containers"
      containers:
        - image: vielen1991/books:1 # change to v2 when secrets are active
          name: books
#          volumeMounts:
#            - mountPath: '/tmp'
#              name: books-secret
#              readOnly: true
          livenessProbe: # if fails - container will be restarted
            httpGet:
              port: http
              path: /health
          startupProbe: # check if container is available after startup (for long-start containers, java big apps for example)
            httpGet:
              port: http
              path: /health
          readinessProbe: # if fails - traffic will be stopped to this container, but container won't be restarted
            httpGet:
              port: http
              path: /health
          env:
            - name: APPLICATION_PORT
              value: ':9090'
            - name: APPLICATION_NAME
              value: 'books'
          ports:
            - name: http
              containerPort: 9090
              protocol: TCP
#          resources:
#            limits:
#              cpu: 100m
#              memory: 512Mi
#            requests:
#              cpu: 100m
#              memory: 256Mi