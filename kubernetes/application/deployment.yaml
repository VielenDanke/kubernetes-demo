# Let's say you use ReplicaSet-A for controlling your pods, then You wish to update your pods to a newer version,
# now you should create Replicaset-B, scale down ReplicaSet-A and scale up ReplicaSet-B by one step repeatedly (This process is known as rolling update).
# Although this does the job, but it's not a good practice and it's better to let K8S do the job.
#
# A Deployment resource does this automatically without any human interaction and increases the abstraction by one level.
#
# Note: Deployment doesn't interact with pods directly, it just does rolling update using ReplicaSets.
apiVersion: apps/v1
kind: Deployment
metadata:
  name: books
  labels:
    app: books
spec:
  replicas: 3
  selector:
    matchLabels:
      app: books # we have to match replicaset with pod labels
  template:
    metadata:
      labels:
        app: books # matched to selector -> matchLabels -> app in replicaset part
    spec:
      volumes:
        - name: books-secret
#          secret:
#            secretName: books-secret
#            items:
#              - key: username
#                path: username
#              - key: password
#                path: password
#              - key: postgresConnectionUrl
#                path: postgres
      containers:
        - image: books:1
          name: books
#          volumeMounts:
#            - mountPath: '/etc'
#              name: books-secret
#              readOnly: true
          livenessProbe: # if fails - container will be restarted
            httpGet:
              port: http
              path: /health
          startupProbe: # check if container is available after startup (for long-start containers, java big apps for example)
            httpGet:
              port: http
              path: /health
          readinessProbe: # if fails - traffic will be stopped to this container, but container won't be restarted
            httpGet:
              port: http
              path: /health
#          env:
#            - name: APPLICATION_PORT
#              value: '9090'
#            - name: APPLICATION_NAME
#              value: 'books'
          ports:
            - name: http
              containerPort: 9090
#          resources:
#            limits:
#              cpu: 500m
#              memory: 1Gi
#            requests:
#              cpu: 500m
#              memory: 512Mi